version: '3.8'
services:
  mariadb:
    image: mariadb:10.5
    command: [ "mysqld", "--lower_case_table_names=1", "--innodb-flush-method=fsync" ]
    hostname: mariadb
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=rum-manager
    volumes:
      - ./data/mariadb:/var/lib/mysql
      - ./init/mariadb:/docker-entrypoint-initdb.d
    ports:
      - 3306:3306
    networks:
      - default
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    ports:
      - 9200:9200
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=500ms" ]
      retries: 300
      interval: 1s
    environment:
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "network.host=0.0.0.0"
      - "transport.host=127.0.0.1"
      - "http.host=0.0.0.0"
      - "cluster.routing.allocation.disk.threshold_enabled=false"
      - "discovery.type=single-node"
      - "xpack.security.authc.anonymous.roles=remote_monitoring_collector"
      - "xpack.security.authc.realms.file.file1.order=0"
      - "xpack.security.authc.realms.native.native1.order=1"
      - "xpack.security.enabled=true"
      - "xpack.license.self_generated.type=trial"
      - "xpack.security.authc.token.enabled=true"
      - "xpack.security.authc.api_key.enabled=true"
      - "logger.org.elasticsearch=${ES_LOG_LEVEL:-error}"
      - "action.destructive_requires_name=false"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - "./init/elasticsearch/roles.yml:/usr/share/elasticsearch/config/roles.yml"
      - "./init/elasticsearch/users:/usr/share/elasticsearch/config/users"
      - "./init/elasticsearch/users_roles:/usr/share/elasticsearch/config/users_roles"
      - "./init/elasticsearch/ingest-geoip:/usr/share/elasticsearch/config/ingest-geoip"

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    ports:
      - 5601:5601
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:5601/api/status | grep -q 'All services are available'" ]
      retries: 300
      interval: 1s
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
      ELASTICSEARCH_USERNAME: "${KIBANA_ES_USER:-kibana_system_user}"
      ELASTICSEARCH_PASSWORD: "${KIBANA_ES_PASS:-changeme}"
      XPACK_FLEET_AGENTS_FLEET_SERVER_HOSTS: '["https://fleet-server:8220"]'
      XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      elasticsearch: { condition: service_healthy }
    volumes:
      - "./init/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml"

  fleet-server:
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    ports:
      - 8200:8200
      - 8220:8220
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -k https://localhost:8220/api/status | grep -q 'HEALTHY'" ]
      retries: 300
      interval: 1s
    environment:
      FLEET_SERVER_ENABLE: "1"
      FLEET_SERVER_POLICY_ID: "fleet-server-apm"
      FLEET_SERVER_ELASTICSEARCH_HOST: http://elasticsearch:9200
      FLEET_SERVER_ELASTICSEARCH_USERNAME: "elastic"
      FLEET_SERVER_ELASTICSEARCH_PASSWORD: "${ELASTIC_PASSWORD}"
      FLEET_SERVER_CERT: /etc/pki/tls/certs/fleet-server.pem
      FLEET_SERVER_CERT_KEY: /etc/pki/tls/private/fleet-server-key.pem
      FLEET_URL: https://fleet-server:8220
      KIBANA_FLEET_SETUP: "true"
      KIBANA_FLEET_HOST: "http://kibana:5601"
      KIBANA_FLEET_USERNAME: "elastic"
      KIBANA_FLEET_PASSWORD: "${ELASTIC_PASSWORD}"
    depends_on:
      elasticsearch: { condition: service_healthy }
      kibana: { condition: service_healthy }
    volumes:
      - "./init/fleet-server/certificate.pem:/etc/pki/tls/certs/fleet-server.pem"
      - "./init/fleet-server/key.pem:/etc/pki/tls/private/fleet-server-key.pem"
networks:
  default: {}
