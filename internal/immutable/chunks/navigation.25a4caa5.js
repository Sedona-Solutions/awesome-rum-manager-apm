import{j as n}from"./singletons.1d32fb1e.js";const s="http://localhost:9080",o=`${s}/rums`;class i{async getAll(){const t=await fetch(o);return t.ok||console.error("Can't retrieve rum list",await t.text()),t.json()}async findById(t){const e=await fetch(`${o}/${t}`);return e.ok||console.error(`Can't retrieve rum with id [${t}]`,await e.text()),e.json()}async deleteById(t){const e=await fetch(`${o}/${t}`,{method:"DELETE"});e.ok||console.error(`Can't delete rum with id [${t}]`,await e.text())}async create(t){const e=await fetch(`${o}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return e.ok||console.error("Can't retrieve rum",t),e.json()}async edit(t){const e=await fetch(`${o}/${t.id}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return e.ok||console.error(`Can't edit rum with id [${t.id}]`,await e.text(),{rum:t}),e.json()}async search(t){const e=await fetch(`${o}/search?name=${t}`);return e.ok||console.error(`Can't search rums with query [${t}]`,await e.text()),e.json()}}const c=n("goto"),l=n("invalidate_all");export{i as R,c as g,l as i};
