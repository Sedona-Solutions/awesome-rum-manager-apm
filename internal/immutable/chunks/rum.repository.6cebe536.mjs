const n="http://localhost:9080",o=`${n}/rums`;class r{async getAll(){const e=await fetch(o);return e.ok||console.error("Can't retrieve rum list",await e.text()),e.json()}async findById(e){const t=await fetch(`${o}/${e}`);return t.ok||console.error(`Can't retrieve rum with id [${e}]`,await t.text()),t.json()}async deleteById(e){const t=await fetch(`${o}/${e}`,{method:"DELETE"});t.ok||console.error(`Can't delete rum with id [${e}]`,await t.text())}async create(e){const t=await fetch(`${o}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return t.ok||console.error("Can't retrieve rum",e),t.json()}async edit(e){const t=await fetch(`${o}/${e.id}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return t.ok||console.error(`Can't edit rum with id [${e.id}]`,await t.text(),{rum:e}),t.json()}async search(e){const t=await fetch(`${o}/search?name=${e}`);return t.ok||console.error(`Can't search rums with query [${e}]`,await t.text()),t.json()}}export{r as R};
